
pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
    }
   
    
    stages {
        stage('Get Code') {
            steps {
                echo "Clonando el repositorio y cambiando a rama master"
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],  // Cambiar a 'master' para producción
                    userRemoteConfigs: [[url: 'git@github.com:andresh2004/todo-list-aws-mi-version.git']]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "Instalando dependencias necesarias para análisis y pruebas"
                sh '''
                    pip install bandit flake8 flake8-html pytest requests awscli
                '''
            }
        }

        stage('Static Test') {
            steps {
                echo "Ejecutando análisis estático con Bandit y Flake8"
                sh '''
                    mkdir -p reports
                    bandit -r src/ -f html -o reports/bandit_report.html || true
                    flake8 src/ --format=html --htmldir=reports/flake8-html || true
                '''
                publishHTML(target: [
                    reportName : 'Bandit Report',
                    reportDir  : 'reports',
                    reportFiles: 'bandit_report.html',
                    keepAll    : true,
                    alwaysLinkToLastBuild: true,
                    allowMissing: true
                ])
                publishHTML(target: [
                    reportName : 'Flake8 Violations',
                    reportDir  : 'reports/flake8-html',
                    reportFiles: 'index.html',
                    keepAll    : true,
                    alwaysLinkToLastBuild: true,
                    allowMissing: true
                ])
            }
        }
         
        stage('Set Stage') {
           steps {
              script {
              def stageName = (env.BRANCH_NAME == 'master') ? 'production' : 'staging'
              echo "Entorno de despliegue seleccionado: ${stageName}"
              currentBuild.displayName = "#${env.BUILD_NUMBER} - ${stageName}"
            }
         }
      }
        

        stage('Deploy') {
            steps {
        script {
            def stageName = (env.BRANCH_NAME == 'master') ? 'production' : 'staging'
            echo "Desplegando aplicación con AWS SAM en entorno: ${stageName}"

            echo "Validando estructura del workspace"
            sh """
                ls -la
                echo "Contenido de src"
                ls -la src
            """

            sh """
                sam build --template-file template.yaml
                echo "El valor de Stage es: ${stageName}"
                sam deploy \
                    --stack-name ${stageName}-todolist-aws \
                    --s3-bucket ${stageName}-todolist-aws \
                    --no-confirm-changeset \
                    --capabilities CAPABILITY_IAM \
                    --no-fail-on-empty-changeset
            """
            }
        }
    }
   
        stage('Rest Test') {
           steps {
            echo "Ejecutando pruebas de integración REST según el entorno"

           script {
              

            ddef stageName = (env.BRANCH_NAME == 'master') ? 'production' : 'staging'
            def testFile = (stageName == 'production')
                ? 'test/integration/todoApiReadOnlyTest.py'
                : 'test/integration/todoApiTest.py'

            def shellScript = """
                pip install pytest requests

                echo "Obteniendo la URL base de la API desplegada..."
                BASE_URL=\$(aws cloudformation describe-stacks --stack-name ${stageName}-todolist-aws \\
                    --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" --output text)

                echo "URL pública detectada: \$BASE_URL"

                echo "Ejecutando pytest sobre: ${testFile}"
                BASE_URL=\$BASE_URL PATH=\$PATH:~/.local/bin pytest ${testFile} --maxfail=1 --disable-warnings -q
            """

            sh shellScript
     
            
       }
    }
} 
        

        stage('Promote to Production') {
            steps {
                echo 'Promoción omitida: ya estamos en master'
                 // sh '''
                     // git config user.name "jenkins"
                     // git config user.email "andresh2004@gmail.com"

                    // Nos aseguramos de tener todo actualizado
                     //git fetch origin

                    // Checkout a master
                    // git checkout master

                    // Hacemos merge de develop (sin conflictos)
                    // git merge origin/develop --no-edit


                    // Traemos los últimos cambios remotos de master (solo si no hay conflictos)
                    // git pull --ff-only origin master
                   
                    // Subimos cambios a master
                    // git push origin master
                 // '''
            }
        }
    }
}

