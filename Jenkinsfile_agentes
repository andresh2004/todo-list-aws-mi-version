pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('Get Code') {
            steps {
                echo "üì• Clonando el repositorio y cambiando a rama develop"
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    userRemoteConfigs: [[url: 'https://github.com/andresh2004/todo-list-aws-mi-version']]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "üì¶ Instalando dependencias necesarias para an√°lisis y pruebas"
                sh '''
                    pip install bandit flake8 flake8-html pytest requests awscli
                '''
            }
        }

        stage('Static Test') {
            steps {
                echo "üîç Ejecutando an√°lisis est√°tico con Bandit y Flake8"
                sh '''
                    mkdir -p reports
                    bandit -r src/ -f html -o reports/bandit_report.html || true
                    flake8 src/ --format=html --htmldir=reports/flake8-html || true
                '''
                publishHTML(target: [
                    reportName : 'Bandit Report',
                    reportDir  : 'reports',
                    reportFiles: 'bandit_report.html',
                    keepAll    : true,
                    alwaysLinkToLastBuild: true,
                    allowMissing: true
                ])
                publishHTML(target: [
                    reportName : 'Flake8 Violations',
                    reportDir  : 'reports/flake8-html',
                    reportFiles: 'index.html',
                    keepAll    : true,
                    alwaysLinkToLastBuild: true,
                    allowMissing: true
                ])
            }
        }

        stage('Deploy') {
            steps {
                echo "üöÄ Desplegando aplicaci√≥n con AWS SAM"
                sh '''
                    echo "üìÅ Validando estructura del workspace"
                    ls -la
                        
                    echo "üìÅ Contenido de src"
                    ls -la src

                    sam build --template-file template.yaml

                    # Despliegue sin necesidad de bucket expl√≠cito
                    sam deploy --stack-name staging-todolist-aws \
                               --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-7xmahjfstf4l \
                               --capabilities CAPABILITY_IAM \
                               --region us-east-1 \
                               --no-confirm-changeset \
                               --no-fail-on-empty-changeset
                '''
            }
        }

        stage('Rest Test') {
            steps {
                echo "üß™ Ejecutando pruebas de integraci√≥n REST con pytest"
                sh '''
                    pip install pytest requests
                    
                    echo "üîé Obteniendo la URL base de la API desplegada..."
                    BASE_URL=$(aws cloudformation describe-stacks --stack-name staging-todolist-aws \
                    --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" --output text)

                                   
                    echo "üåê URL p√∫blica detectada: $BASE_URL"
                    

                    echo "üß™ Ejecutando pytest..."
                    BASE_URL=$BASE_URL PATH=$PATH:~/.local/bin pytest test/integration/todoApiTest.py --maxfail=1 --disable-warnings -q
                    
                '''
            }
        }
    }
}
