pipeline {
    agent none
    environment {
        SERVERLESS_URL_FILE = 'env_url.txt'
    }

    stages {
        stage('Análisis Estático') {
            agent { label 'agente-estatico' }
            steps {
                echo 'Ejecutando Flake8 y Bandit...'
                sh 'flake8 src/'
                sh 'bandit -r src/'
            }
        }

        stage('Despliegue Serverless') {
            agent { label 'default' } // o un agente específico si tienes uno para despliegues
            steps {
                echo 'Desplegando entorno serverless...'
                // Simulación de despliegue y obtención de URL
                sh 'echo "https://mi-api-serverless.com" > ${SERVERLESS_URL_FILE}'
                stash includes: "${SERVERLESS_URL_FILE}", name: 'serverless-url'
            }
        }

        stage('Pruebas API REST') {
            agent { label 'agente-api' }
            steps {
                unstash 'serverless-url'
                script {
                    def url = readFile("${SERVERLESS_URL_FILE}").trim()
                    echo "Probando API en: ${url}"
                }

                // Puedes usar pytest o curl según tu stack
                sh '''
                    # Ejemplo con pytest
                    echo "Ejecutando pruebas con Pytest..."
                    pytest tests/test_api.py --maxfail=1 --disable-warnings --tb=short
                '''
            }
        }

        stage('Empaquetado y Finalización') {
            agent { label 'default' }
            steps {
                echo 'Empaquetando aplicación...'
                sh 'tar -czf app.tar.gz src/'
                echo 'Pipeline finalizado con éxito.'
            }
        }
    }
}
